# This file is a template, and might need editing before it works on your project.
variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/namespace/project

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - build
  - deploy

compile:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t gamingsaves-collector.docker .
    - docker save -o gamingsaves-collector.docker .
  artifacts:
    paths:
      - gamingsaves-collector.docker

deploy_prod:
  stage: deploy
  image: debian:latest
  environment:
    name: production
  only:
    - master
  script:
    - chmod 600 $SSH_KEY
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh -i $SSH_KEY jimmy@$PROD_ADDR rm -f /home/jimmy/gamingsaves-collector.docker
    - scp -i $SSH_KEY $CI_PROJECT_DIR/gamingsaves-ws  jimmy@$PROD_ADDR:/home/jimmy/gamingsaves-collector.docker
    - ssh -i $SSH_KEY jimmy@$PROD_ADDR chmod +x /home/jimmy/gamingsaves-collector.docker
